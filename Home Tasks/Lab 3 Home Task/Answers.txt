Task 2:
There was no change when button was pressed because the function for it wasn't called (it was commented)


Task 3:
Debounce Issue:
A debounce issue occurs when a mechanical switch (like a button) is pressed or released, causing unintended multiple signals due to physical vibrations or noise. We remove it because it can lead to multiple unintended activations in a single press, causing issues in applications where precise input is required.

Uses:
Embedded systems: Where a single button press should register only one event (e.g., resetting a microcontroller, stopping a motor).
Keyboards: A key should register only one press, not multiple.
Industrial control systems: Incorrect inputs from sensors or buttons could cause machinery malfunctions.
User interfaces (e.g., ATMs, vending machines): Prevents accidental multiple selections.

Why?
-The issue may arise from hardware behavior, not code translation.
-The program may be logically correct but affected by unintended input signals.
-Cheap or low-quality switches tend to bounce more, but even high-end switches experience it due to their mechanical nature.